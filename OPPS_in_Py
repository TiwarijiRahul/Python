# class Student: #creating class

#     name = "Rahul"

# #Creating Objects(Instance)

# s1 = Student()
# s2 = Student()
# print(s1.name)
# print(s2.name)

# class car:
#     color = "blue"
#     brand = "SUV"

# car1=car()
# print(car1.brand)

#Creating constructor __init functions
# class Student: #creating class
    

#     def __init__(self, fullname,marks):
#         self.name = fullname
#         self.marks = marks
#         print("adding new name..")
    

# #Creating Objects(Instance)

# s1 = Student("rahul",90)
# print(s1.name,s1.marks)

# s2 = Student("Ram",88)
# print(s2.name,s2.marks)

## Class & Attributes##
# class student:
#     college_name = "abc college"
#     name ="anonymous" #class attr
#     def __init__(self,name,marks):
#         self.name = name #obj attrr>class attr
#         self.marks = marks
    
# s1 = student("rahul",90)
# print(s1.name,s1.marks)

# print(student.college_name)

#Methods ##
# class student:
#     college_name ="abc"
#     name = "Anonomous"

#     def __init__(self,name,marks):
#         self.name = name
#         self.marks = marks

#     def welcome(self):
#         print("welcome student..",self.name)

#     def get_marks(self):
#         return(self.marks)
    
# s1 = student("rahul",90)
# s1.welcome()
# print(s1.get_marks())
    
# Ques.1 # Create student that takes name & marks of 3 subjects as arguments
#in constructor. Then create a method to print the avg.
# class student:
#     def __init__(self, name, marks):
#         self.name = name
#         self.marks = marks
    
#     @staticmethod #Static method#
#     def hello():
#         print("hello")

#     def get_avg(self):
#         sum = 0
#         for val in self.marks:
#              sum+=val
        
#         print("hi",self.name,"Your avg score is : ", sum/3)

   


# s1= student("rahul", [90,98,99])
# s1.get_avg()
# s1.name = "Ram"
# s1.get_avg()

# class car:

#     def __init__(self):
#         self.acce = False
#         self.brk= False
#         self.clutch =False

#     def start(self):
#         self.clutch = True
#         self.acce = True
#         print("Car started")


# car1 = car()
# car1.start()

# Ques.2 # Create Account class with 2 attributes- balance & account no. 
#Create methods for debit, credit & Printing the balance.

# class Account:
#     def __init__(self, account, balance):
#         self.account = account
#         self.balance = balance

#     #debit method#

#     def Debit_(self,amount):
#         self.balance -=amount
#         print("Rs.", amount,"was debited")
#         print("total balance = ",self.get_balace())

    
#     def credit_(self, amount):
#         self.balance += amount
#         print("Rs.", amount,"Was credited")
#         print("total balance = ",self.get_balace())

    
#     def get_balace(self): #method# get total balance
#         return self.balance
    

# acc1 = Account(111, 10000)
# acc1.Debit_(500)
# acc1.credit_(2000)

# #Delete property 
# class student:
#     def __init__(self, name):
#         self.name = name

    
# s1 = student("rahul")
# print(s1.name)
# del s1.name
# print(s1.name)


# Print area and perimeter of cilrcle using class.
# class circle:
#     def __init__(self,radius):
#         self.radius = radius

#     def area(self):
#         return (22/7)* self.radius **2

#     def perimeter(self):
#         return 2 * (22/7) * self.radius


# c1= circle(5)
# print(c1.area())
# print(c1.perimeter())

#Q. Define a Employee class with attributes role,department and salary.
#This class(), Show details() method.
#Create an Engineer class that inherts properties from employee and attributes: name &age.

# class Employee:
#     def __init__(self, role, dept, salary):
#         self.role = role
#         self.dept = dept
#         self.salary = salary

#     def showdetails(self):
#         print("role = ", self.role)
#         print("dept = ", self.dept)  
#         print("salary = ", self.salary)

# class Engineer(Employee):
#     def __init__(self, name, age):
#         self.name = name
#         self.age = age
#         super().__init__("Engineer", "IT", "65,000")

# engg1 = Engineer("Elon", 40)
# engg1.showdetails()

# Q. Create a class called order which stores item & its price.
# Use Dunder function __gt__() to convey that:
# order1>order2 if price of oder1> price of order2

# class order:
#     def __init__(self,item,price):
#         self.item = item
#         self.price = price

#     def __gt__(self,odr2):
#         return self.price>odr2.price
    
# odr1 = order("chips",20)
# odr2 = order("tea",25)

# print(odr1<odr2)
          
